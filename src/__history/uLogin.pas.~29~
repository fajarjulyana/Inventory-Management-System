unit uLogin;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs,
  FMX.Controls.Presentation, FMX.StdCtrls, uMenu, FMX.Objects, FMX.Effects,
  FMX.Edit, uDM,IdHash, IdHashMessageDigest, IdGlobal;

type
  TForm1 = class(TForm)
    Rectangle1: TRectangle;
    Rectangle2: TRectangle;
    ShadowEffect1: TShadowEffect;
    ShadowEffect2: TShadowEffect;
    Circle1: TCircle;
    ShadowEffect3: TShadowEffect;
    Label1: TLabel;
    CheckBox1: TCheckBox;
    CornerButton1: TCornerButton;
    SB: TStyleBook;
    Edit2: TEdit;
    Edit1: TEdit;
    Label2: TLabel;
    Label3: TLabel;
    ShadowEffect4: TShadowEffect;
    ShadowEffect5: TShadowEffect;
    procedure CheckBox1Change(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure CornerButton1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
  function MD5Hash(const AInput: string): string;
  function BytesToHex(const ABytes: TIdBytes): string;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.fmx}

procedure TForm1.Button1Click(Sender: TObject);
begin
if not Assigned(Form2) then
Form2:= TForm2.Create(Self);

Form2.ShowModal(
              procedure(ModalResult: TModalResult)
              begin
                if ModalResult = mrClose then Application.Terminate;
              end
              );

end;

function TForm1.BytesToHex(const ABytes: TIdBytes): string;
var
  I: Integer;
begin
  Result := '';
  for I := 0 to Length(ABytes) - 1 do
  begin
    Result := Result + IntToHex(ABytes[I], 2);
  end;
end;

procedure TForm1.CheckBox1Change(Sender: TObject);
begin
if not Checkbox1.IsChecked then
   begin
     Edit2.Password := true;
   end
   else
   begin
     Edit2.Password := false;
   end;
end;

procedure TForm1.CornerButton1Click(Sender: TObject);
var pwd: string;
  InputString: string;
  MD5Result: string;
begin
if trim(Edit1.Text)='' then
   begin
     ShowMessage('Please Enter Username');
     Edit1.SetFocus;
   end
   else
   begin
     with DataModule1 do begin
       FDConnection1.open;
       FDQuery1.sql.clear;
       FDQuery1.sql.text := 'select *from users where username='+Quotedstr(Edit1.text);
       FDQuery1.Open;
       if FDQuery1.RecordCount > 0 then
       begin
       pwd := FDQuery1.FieldByName('password').AsString;
       if pwd=Edit2.Text then
       begin
       if not Assigned(Form2) then
        Form2:= TForm2.Create(Self);
        Form2.ShowModal(
              procedure(ModalResult: TModalResult)
              begin
                if ModalResult = mrClose then Application.Terminate;
              end
              );
       end else
       begin
         ShowMessage('Incorrect Password');
       end;
       end else
       begin
        ShowMessage('Incorrect Username');
       end

     end;
  end;
end;
procedure TForm1.FormCreate(Sender: TObject);
begin
Edit1.SetFocus;
end;

function TForm1.MD5Hash(const AInput: string): string;
var
  MD5: TIdHashMessageDigest5;
  HashBytes: TIdBytes;
begin
  MD5 := TIdHashMessageDigest5.Create;
  try
    // Convert TEncoding to IIdTextEncoding
    HashBytes := MD5.HashString(AInput, IndyTextEncoding_UTF8);

    // Convert hash result to hexadecimal string
    Result := BytesToHex(HashBytes);
  finally
    MD5.Free;
  end;
end;

end.
